amends "../export.pkl"
import "@k8s/K8sResource.pkl"
import "@k8s/api/apps/v1/Deployment.pkl"
import "@k8s/api/core/v1/Service.pkl"
import "../components/App.pkl" as App
import "../crds/Application.pkl"

resources = new Listing<App> {
  new {
    name = "infra-cert-manager"
    namespace = "cert-manager"
    autoSync = false
    source {
        repoURL = "https://charts.jetstack.io"
        chart = "cert-manager"
        targetRevision = "v1.16.1"
        helm {
          releaseName = "cert-manager"
          valuesObject {
            crds {
              enabled = true
            }
          }
        }
    }
  }
  new {
    name = "infra-ingress-controller"
    namespace = "traefik-system"
    autoSync = false
    source {
      chart = "traefik"
      repoURL = "ghcr.io/traefik/helm"
      targetRevision = "32.1.0"
      helm {
        releaseName = "traefik"
        valuesObject {
          podSecurityContext {
            sysctls {
              new {
                name = "net.ipv4.ip_unprivileged_port_start"
                value = "0"
              }
            }
          }
          deployment {
            replicas = 2
          }
          additionalArguments {
            "--providers.kubernetesingress.ingressendpoint.publishedservice=traefik-system/traefik"
            "--api.insecure=true"
            "--entrypoints.web.http.redirections.entrypoint.to=websecure"
            "--entrypoints.web.http.redirections.entrypoint.scheme=https"
            "--entrypoints.web.http.redirections.entrypoint.priority=1"
          }
          providers {
            kubernetesCRD {
              allowEmptyServices = true
              allowCrossNamespace = true
              allowExternalNameServices = true
            }
            kubernetesIngress {
              enabled = true
              allowEmptyServices = true
              allowExternalNameServices = true
            }
          }
          ports {
            web {
              port = 80
            }
            websecure {
              port = 443
              http3 {
                enabled = true
              }
            }
          }
        }
      }
    }
  }
}
  .toList()
  .map((app) -> app.application).toListing()